<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sichuang.service.impl.dao.impl.mybatis.OperateLogInOutMapper" >
  <resultMap id="BaseResultMap" type="com.sichuang.bean.entity.OperateLogInOut" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="company_id" property="companyId" jdbcType="VARCHAR" />
    <result column="license_id" property="licenseId" jdbcType="VARCHAR" />
    <result column="vehicle_no" property="vehicleNo" jdbcType="VARCHAR" />
    <result column="login_time" property="loginTime" jdbcType="BIGINT" />
    <result column="in_longitude" property="inLongitude" jdbcType="DOUBLE" />
    <result column="in_latitude" property="inLatitude" jdbcType="DOUBLE" />
    <result column="in_encrypt" property="inEncrypt" jdbcType="INTEGER" />
    <result column="logout_time" property="logoutTime" jdbcType="BIGINT" />
    <result column="out_longitude" property="outLongitude" jdbcType="DOUBLE" />
    <result column="out_latitude" property="outLatitude" jdbcType="DOUBLE" />
    <result column="out_encrypt" property="outEncrypt" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, company_id, license_id, vehicle_no, login_time, in_longitude, in_latitude, in_encrypt, 
    logout_time, out_longitude, out_latitude, out_encrypt
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.sichuang.bean.entity.OperateLogInOutExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from operate_log_in_out
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart >= 0" >
      limit ${limitStart} , ${pageSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from operate_log_in_out
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from operate_log_in_out
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.sichuang.bean.entity.OperateLogInOutExample" >
    delete from operate_log_in_out
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.sichuang.bean.entity.OperateLogInOut" >
    insert into operate_log_in_out (id, company_id, license_id, 
      vehicle_no, login_time, in_longitude, 
      in_latitude, in_encrypt, logout_time, 
      out_longitude, out_latitude, out_encrypt
      )
    values (#{id,jdbcType=INTEGER}, #{companyId,jdbcType=VARCHAR}, #{licenseId,jdbcType=VARCHAR}, 
      #{vehicleNo,jdbcType=VARCHAR}, #{loginTime,jdbcType=BIGINT}, #{inLongitude,jdbcType=DOUBLE}, 
      #{inLatitude,jdbcType=DOUBLE}, #{inEncrypt,jdbcType=INTEGER}, #{logoutTime,jdbcType=BIGINT}, 
      #{outLongitude,jdbcType=DOUBLE}, #{outLatitude,jdbcType=DOUBLE}, #{outEncrypt,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.sichuang.bean.entity.OperateLogInOut" >
    insert into operate_log_in_out
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="companyId != null" >
        company_id,
      </if>
      <if test="licenseId != null" >
        license_id,
      </if>
      <if test="vehicleNo != null" >
        vehicle_no,
      </if>
      <if test="loginTime != null" >
        login_time,
      </if>
      <if test="inLongitude != null" >
        in_longitude,
      </if>
      <if test="inLatitude != null" >
        in_latitude,
      </if>
      <if test="inEncrypt != null" >
        in_encrypt,
      </if>
      <if test="logoutTime != null" >
        logout_time,
      </if>
      <if test="outLongitude != null" >
        out_longitude,
      </if>
      <if test="outLatitude != null" >
        out_latitude,
      </if>
      <if test="outEncrypt != null" >
        out_encrypt,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="companyId != null" >
        #{companyId,jdbcType=VARCHAR},
      </if>
      <if test="licenseId != null" >
        #{licenseId,jdbcType=VARCHAR},
      </if>
      <if test="vehicleNo != null" >
        #{vehicleNo,jdbcType=VARCHAR},
      </if>
      <if test="loginTime != null" >
        #{loginTime,jdbcType=BIGINT},
      </if>
      <if test="inLongitude != null" >
        #{inLongitude,jdbcType=DOUBLE},
      </if>
      <if test="inLatitude != null" >
        #{inLatitude,jdbcType=DOUBLE},
      </if>
      <if test="inEncrypt != null" >
        #{inEncrypt,jdbcType=INTEGER},
      </if>
      <if test="logoutTime != null" >
        #{logoutTime,jdbcType=BIGINT},
      </if>
      <if test="outLongitude != null" >
        #{outLongitude,jdbcType=DOUBLE},
      </if>
      <if test="outLatitude != null" >
        #{outLatitude,jdbcType=DOUBLE},
      </if>
      <if test="outEncrypt != null" >
        #{outEncrypt,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.sichuang.bean.entity.OperateLogInOutExample" resultType="java.lang.Integer" >
    select count(*) from operate_log_in_out
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update operate_log_in_out
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.companyId != null" >
        company_id = #{record.companyId,jdbcType=VARCHAR},
      </if>
      <if test="record.licenseId != null" >
        license_id = #{record.licenseId,jdbcType=VARCHAR},
      </if>
      <if test="record.vehicleNo != null" >
        vehicle_no = #{record.vehicleNo,jdbcType=VARCHAR},
      </if>
      <if test="record.loginTime != null" >
        login_time = #{record.loginTime,jdbcType=BIGINT},
      </if>
      <if test="record.inLongitude != null" >
        in_longitude = #{record.inLongitude,jdbcType=DOUBLE},
      </if>
      <if test="record.inLatitude != null" >
        in_latitude = #{record.inLatitude,jdbcType=DOUBLE},
      </if>
      <if test="record.inEncrypt != null" >
        in_encrypt = #{record.inEncrypt,jdbcType=INTEGER},
      </if>
      <if test="record.logoutTime != null" >
        logout_time = #{record.logoutTime,jdbcType=BIGINT},
      </if>
      <if test="record.outLongitude != null" >
        out_longitude = #{record.outLongitude,jdbcType=DOUBLE},
      </if>
      <if test="record.outLatitude != null" >
        out_latitude = #{record.outLatitude,jdbcType=DOUBLE},
      </if>
      <if test="record.outEncrypt != null" >
        out_encrypt = #{record.outEncrypt,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update operate_log_in_out
    set id = #{record.id,jdbcType=INTEGER},
      company_id = #{record.companyId,jdbcType=VARCHAR},
      license_id = #{record.licenseId,jdbcType=VARCHAR},
      vehicle_no = #{record.vehicleNo,jdbcType=VARCHAR},
      login_time = #{record.loginTime,jdbcType=BIGINT},
      in_longitude = #{record.inLongitude,jdbcType=DOUBLE},
      in_latitude = #{record.inLatitude,jdbcType=DOUBLE},
      in_encrypt = #{record.inEncrypt,jdbcType=INTEGER},
      logout_time = #{record.logoutTime,jdbcType=BIGINT},
      out_longitude = #{record.outLongitude,jdbcType=DOUBLE},
      out_latitude = #{record.outLatitude,jdbcType=DOUBLE},
      out_encrypt = #{record.outEncrypt,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sichuang.bean.entity.OperateLogInOut" >
    update operate_log_in_out
    <set >
      <if test="companyId != null" >
        company_id = #{companyId,jdbcType=VARCHAR},
      </if>
      <if test="licenseId != null" >
        license_id = #{licenseId,jdbcType=VARCHAR},
      </if>
      <if test="vehicleNo != null" >
        vehicle_no = #{vehicleNo,jdbcType=VARCHAR},
      </if>
      <if test="loginTime != null" >
        login_time = #{loginTime,jdbcType=BIGINT},
      </if>
      <if test="inLongitude != null" >
        in_longitude = #{inLongitude,jdbcType=DOUBLE},
      </if>
      <if test="inLatitude != null" >
        in_latitude = #{inLatitude,jdbcType=DOUBLE},
      </if>
      <if test="inEncrypt != null" >
        in_encrypt = #{inEncrypt,jdbcType=INTEGER},
      </if>
      <if test="logoutTime != null" >
        logout_time = #{logoutTime,jdbcType=BIGINT},
      </if>
      <if test="outLongitude != null" >
        out_longitude = #{outLongitude,jdbcType=DOUBLE},
      </if>
      <if test="outLatitude != null" >
        out_latitude = #{outLatitude,jdbcType=DOUBLE},
      </if>
      <if test="outEncrypt != null" >
        out_encrypt = #{outEncrypt,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sichuang.bean.entity.OperateLogInOut" >
    update operate_log_in_out
    set company_id = #{companyId,jdbcType=VARCHAR},
      license_id = #{licenseId,jdbcType=VARCHAR},
      vehicle_no = #{vehicleNo,jdbcType=VARCHAR},
      login_time = #{loginTime,jdbcType=BIGINT},
      in_longitude = #{inLongitude,jdbcType=DOUBLE},
      in_latitude = #{inLatitude,jdbcType=DOUBLE},
      in_encrypt = #{inEncrypt,jdbcType=INTEGER},
      logout_time = #{logoutTime,jdbcType=BIGINT},
      out_longitude = #{outLongitude,jdbcType=DOUBLE},
      out_latitude = #{outLatitude,jdbcType=DOUBLE},
      out_encrypt = #{outEncrypt,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>